{"version":3,"sources":["components/Navbar.js","components/UpperCase.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","head","role","placeholder","onClick","bgcol","for","UpperCase","useState","text","setText","style","color","heading","onChange","event","target","value","backgroundColor","newvar","toUpperCase","showAlert","toLowerCase","new2","trim","y","charAt","slice","length","split","About","obj","Alert","alert","class","word","cap","defaultProps","App","setMode","setAlert","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75af3d63.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.head}</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li>\r\n                            <li className=\"nav-item dropdown\">\r\n                                <a className=\"nav-link dropdown-toggle\" href=\"http://google.com\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                    Dropdown\r\n                               </a>\r\n                                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                    <li><a className=\"dropdown-item\" href=\"http://google.com\">Action</a></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"http://google.com\">Another action</a></li>\r\n                                    <li><hr className=\"dropdown-divider\" /></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"http://google.com\">Something else here</a></li>\r\n                                </ul>\r\n                            </li>\r\n\r\n                        </ul>\r\n\r\n                        <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n\r\n            <div className={` container bg-${props.mode} ms-0`}>\r\n\r\n                <div className={`form-check form-switch text-${props.mode === 'light' ? '#111111' : 'light'} mx-2`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.bgcol} />\r\n                    <label className=\"form-check-label\" for=\"flexSwitchCheckChecked\">Enable dark mode</label>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    head: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'My App default',\r\n    head: 'Home default'\r\n};","import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nexport default function UpperCase(props) {\r\n\r\n    const [text, setText] = useState('');\r\n\r\n\r\n    const uppercase = () => {\r\n        let newvar = text.toUpperCase();\r\n\r\n        setText(newvar);\r\n        props.showAlert(\"Text converted to Uppercase\", \"success\");\r\n    }\r\n    const lowercase = () => {\r\n        let newvar = text.toLowerCase();\r\n\r\n        setText(newvar);\r\n        props.showAlert(\"Text converted to lowercase\", \"success\");\r\n    }\r\n    const cleartext = () => {\r\n\r\n\r\n        setText(\"\");\r\n        props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const change = (event) => {\r\n        setText(event.target.value);\r\n\r\n\r\n    }\r\n    const cremover = () => {\r\n        let new2 = text.trim();\r\n\r\n        setText(new2);\r\n        props.showAlert(\" Extra blank spaces removed\", \"success\");\r\n\r\n    }\r\n    const capital = () => {\r\n        let new2 = text.charAt(0);\r\n        let y = new2.toUpperCase();\r\n        setText(y + text.slice(1));\r\n        props.showAlert(\"First character capitalized\", \"success\");\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mt-4\">\r\n                <div className=\"form-floating\">\r\n                    <h4 style={{ color: props.mode === 'light' ? '#111111' : 'light' }}>{props.heading}</h4>\r\n                    <textarea className=\"form-control\" onChange={change} value={text} placeholder=\"text here\" id=\"textarea\" style={{ backgroundColor: props.mode === '#111111' ? '#111111' : 'white', color: props.mode === '#111111' ? 'white' : 'black' }}> </textarea>\r\n\r\n\r\n                </div>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary mt-2 mx-2\" onClick={uppercase}>Convert to UpperCase</button>\r\n                <button type=\"button\" className=\"btn btn-primary mt-2 mx-2\" onClick={lowercase}>Convert to LowerCase</button>\r\n\r\n                <button type=\"button\" className=\"btn btn-primary mt-2 mx-2\" onClick={cremover}>Trim the spaces</button>\r\n                <button type=\"button\" className=\"btn btn-primary mt-2\" onClick={capital}>Capitalize first word</button>\r\n                <button type=\"button\" className=\"btn btn-primary mt-2 mx-2\" onClick={cleartext}>Clear text</button>\r\n            </div>\r\n\r\n\r\n            <div className=\"container mt-5\" style={{ color: props.mode === 'light' ? '#111111' : 'light' }}>\r\n                <h4 style={{ color: props.mode === '#111111' ? 'white' : 'black' }}>Word count and length of characters are as:</h4>\r\n                <p style={{ color: props.mode === '#111111' ? 'white' : 'black' }}>No. of characters are: {text.length}</p>\r\n\r\n\r\n                <p style={{ color: props.mode === '#111111' ? 'white' : 'black' }}>Word count is :{text.split(\" \").length}</p>\r\n                {/* <h3>Preview trimmed</h3>\r\n                <p>{new2}</p> */}\r\n\r\n\r\n                <h3 className=\"my-5\" style={{ color: props.mode === '#111111' ? 'white' : 'black' }}>Preview here</h3>\r\n                <p style={{ color: props.mode === '#111111' ? 'white' : 'black' }}>{text.length > 0 ? text : 'Enter something above to preview here'}</p>\r\n\r\n\r\n            </div>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\nUpperCase.propTypes = {\r\n    heading: PropTypes.string\r\n\r\n}\r\nUpperCase.defaultProps = {\r\n    heading: 'default heading'\r\n\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n\r\n    const [obj, setDark] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    }\r\n    )\r\n\r\n\r\n    const [btntxt, setTxt] = useState('Enable dark mode')\r\n\r\n\r\n    const dark = () => {\r\n        if (obj.color === 'black') {\r\n            setDark({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setTxt('Enable light mode')\r\n\r\n\r\n        } else {\r\n            setDark({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setTxt('Enable dark mode')\r\n\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"container\" >\r\n                <div className=\"accordion\" id=\"accordionExample\" >\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={obj} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                <b>  Academics</b></button>\r\n\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={obj} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                <b>  Carrier</b>\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={obj} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                <b> Interests</b>\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n\r\n                {/* <button type=\"button\" onClick={dark} class=\"btn btn-primary\">{btntxt}</button> */}\r\n\r\n                {/* <div className=\"form-check form-switch\">\r\n                    <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={dark} />\r\n                    <label className=\"form-check-label\" for=\"flexSwitchCheckChecked\">{btntxt}</label>\r\n                </div> */}\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Alert(props) {\r\n\r\n    const cap = (word) => {\r\n\r\n        const new2 = word.toLowerCase();\r\n        return new2.charAt(0).toUpperCase() + new2.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {cap(props.alert.type)} <strong>{props.alert.text}</strong>\r\n\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\n\nimport Navbar from './components/Navbar'\nimport UpperCase from './components/UpperCase'\nimport About from './components/About'\nimport Alert from './components/Alert'\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (text, type) => {\n    setAlert({\n      text: text,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const bgcol = () => {\n    if (mode === '#111111') {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode('#111111');\n      document.body.style.backgroundColor = '#111111';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n\n  }\n\n\n\n\n\n\n  return (\n    <>\n\n\n\n      <Alert alert={alert} />\n\n\n      <Router>\n        <Navbar title=\"MyApp\" head=\"Home\" mode={mode} bgcol={bgcol} />\n\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n\n          <Route path=\"/\">\n            <UpperCase heading=\"Enter your text here\" mode={mode} showAlert={showAlert} />\n          </Route>\n        </Switch>\n\n\n      </Router>\n\n    </>\n\n\n\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}